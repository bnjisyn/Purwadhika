# -*- coding: utf-8 -*-
"""Kel 7_Tugas 7_Modul 1_14 Mei 2024 (Team Assignment).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T5CdXvj43mpwdL1Vvm_hLUYR8qGH2Pok

> Benjamin Nikholas

> Data Science / JCSDOL-014

> Modul 1 - Tugas 7

> 14 Mei 2024

> Teams Assignment (Kelompok 7):

* Benjamin Nikholas
* Tirza Hidayati
* Indah Astary Suwandi
* Febby Putri Milenia Piter

---
---

#1
"""

def timeConverter(detik):
    if type(detik) == float:
        return False
    elif type(detik) == str:
        return False
    elif detik == '':
        return False
    elif detik > 359999:
        return False
    elif detik < 0:
        return False

    jam = detik // 3600
    sisa_detik = detik % 3600
    menit = sisa_detik // 60
    detikhasil = sisa_detik % 60
    return '{:02d}:{:02d}:{:02d}'.format(jam, menit, detikhasil)


def fungsi(detik):
    if not timeConverter(detik):
        print('Invalid input')
        return ''
    return timeConverter(detik)

detik = (input('Masukkan angka : '))

try:
    detik = int(detik)
except:
    detik = detik

print(fungsi(detik))

"""#2"""

def identitas(npwp):
    if npwp[:2] == "01" or npwp[:2] == "02" or npwp[:2] == "03":
        return "Wajib Pajak Badan"
    elif npwp[:2] == "04" or npwp[:2] == "06":
        return "Wajib Pajak Pengusaha"
    elif npwp[:2] == "05":
        return "Wajib Pajak Karyawan"
    elif npwp[:2] == "07" or npwp[:2] == "08" or npwp[:2] == "09":
        return "Wajib Pajak Orang Pribadi"
    else:
        raise ValueError("Kode seri NPWP ini tidak valid dikarenakan 2 digit pertama hanya bisa diisi 01 sampai 09")


def verifikasi_npwp(npwp):
    # Mengecek panjang kode
    if len(npwp) > 20:
        return False, "Kode seri NPWP ini tidak valid dikarenakan lebih dari 15 digit angka."

    # Mengecek format NPWP yang sesuai
    if npwp[2] != '.' or npwp[6] != '.' or npwp[10] != '.' or npwp[12] != '-' or npwp[16] != '.':
        return False, "Kode seri NPWP ini tidak valid dikarenakan tidak mengikuti format baku: 99.999.999.9-999.999."

    # Menghilangkan titik dan tanda hubung dari NPWP
    npwp_cleaned = npwp.replace('.', '').replace('-', '')

    # Mengecek karakter angka pada dua digit pertama
    for j in npwp_cleaned:
        if not j.isdigit():
            return False, "Kode seri NPWP ini tidak valid dikarenakan terdapat karakter bukan angka di dalamnya."

    # Menguraikan NPWP
    identitas_wp = npwp[:2]
    id = identitas(npwp)
    nomor_registrasi = npwp[3:10]
    alat_pengaman = npwp[11]
    kode_kpp = npwp[13:16]
    status_wp = npwp[17:]

    return True, f"Identitas Wajib Pajak: {identitas_wp} {id}\nNomor Registrasi: {nomor_registrasi}\nAlat Pengaman: {alat_pengaman}\nKode KPP: {kode_kpp}\nStatus Wajib Pajak: {status_wp}"

npwp = input("Masukkan NPWP sesuai format: ")

try:
    valid, message = verifikasi_npwp(npwp)
    if valid:
        print("Kode seri NPWP valid!")
        print(message)
    else:
        print("Kode seri NPWP tidak valid.")
        print(message)
except ValueError as e:
    print(e)

testcase_list = ['99.999.999.9-999.999',
                 '091234565623179',
                 '09.123.456.A-123.123',
                 '09.265.796.5-235.6987',
                 '05.885.434.4-215.000']

for i in testcase_list:
  try:
    valid, message = verifikasi_npwp(i)
    if valid:
        print("Kode seri NPWP valid!")
        print(message)
    else:
        print("Kode seri NPWP tidak valid.")
        print(message)
  except ValueError as e:
      print(e)

"""#3"""

def urai(kata):
    hasil = ""
    for i in range(len(kata)):
        hasil += kata[:i+1]
    return hasil

def rajut(kata):
    n = 0
    while (n * (n + 1)) // 2 < len(kata):
        n += 1
    if (n * (n + 1)) // 2 != len(kata):
        return "Invalid input"

    original_str = kata[(n * (n - 1)) // 2:]

    return original_str

print(urai('Code'))
print(urai('Python'))
print(urai('Purwadhika'))

print(rajut('CCoCodCode'))
print(rajut('PPyPytPythPythoPython'))
print(rajut('PPuPurPurwPurwaPurwadPurwadhPurwadhiPurwadhikPurwadhika'))

