# -*- coding: utf-8 -*-
"""Kel 7_Tugas 8_Modul 1_15 Mei 2024 (Team Assignment).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h61AipSfAP72UbE4QAHPqXoLvzLamZca

> Benjamin Nikholas

> Data Science / JCSDOL-014

> Modul 1 - Tugas 8

> 15 Mei 2024

> Teams Assignment (Kelompok 7):

* Benjamin Nikholas
* Tirza Hidayati
* Indah Astary Suwandi
* Febby Putri Milenia Piter

---
---
"""

db = []

def main_menu():
  print('''# Account Registration
### Selamat Datang di XXYY Apps ###
1. Register
2. Login
3. Exit''')

  while True:
    try:
      user_input = int(input('Masukkan Pilihan [1 - 3] : '))

      if user_input == 1:
        register()
      elif user_input == 2:
        user_login()
      elif user_input == 3:
        break
      else:
        print('Pilihan tidak valid. Silakan masukkan angka sesuai pilihan')

    except ValueError:
      print('Masukkan harus berupa angka')

def register():

  personal_data = input_personal_data()

  print_personal_data(personal_data)

  while True:
      user_input_validation = input('Simpan data (Y/N) :').lower()

      if user_input_validation == 'y':
        db.append(personal_data)
        print('Data Tersimpan\n')
      elif user_input_validation =='n':
        print('Data Tidak Tersimpan\n')
      else:
        print('Masukkan input sesuai pilihan yang tersedia')

      main_menu()
      break

def print_personal_data(personal_data:dict):

  print(f'''User Profile :
nama : {personal_data['Nama']}
email : {personal_data['Email']}
gender : {personal_data['Gender']}
usia : {personal_data['Usia']}
pekerjaan : {personal_data['Pekerjaan']}
hobi : {' '.join(personal_data['Hobi'])}
Alamat :
    Nama Kota : {personal_data['Alamat']['Nama Kota']}
    RT : {personal_data['Alamat']['RT']}
    RW : {personal_data['Alamat']['RW']}
    Zip Code : {personal_data['Alamat']['Zip Code']}
    Geo :
        Lat : {personal_data['Alamat']['Geo']['Lat']}
        Longitude : {personal_data['Alamat']['Geo']['Longitude']}
No Hp : {personal_data['No. Hp']}''')

def input_personal_data():

    # Input Handling
    def get_userid_input(prompt, validation_func, database = None, data_type = str):
        while True:
            user_input = data_type(input(prompt))
            if validation_func(user_input, database):
                return user_input
            print(f'Input tidak valid. Silakan coba lagi.')

    def get_input(prompt, validation_func, data_type = str):
        while True:
            user_input = data_type(input(prompt))
            if validation_func(user_input):
                return user_input
            print(f'Input tidak valid. Silakan coba lagi.')

    def get_multiple_input(prompt, validation_func):
        while True:
            user_input = input(prompt)
            hobi_list = user_input.split()
            if all(validation_func(hobi) for hobi in hobi_list):
                return hobi_list
            print('Hobi hanya boleh berisi huruf alfabet dan minimal satu hobi.')

    def get_geo_input(prompt):
        while True:
            geo_input = input(prompt)
            try:
                lat, lon = map(float, geo_input.split())
                return {'Lat': lat, 'Longitude': lon}
            except ValueError:
                print('Format Geo salah. Pastikan menggunakan format `Latitude Longitude`.')

    # User Input Validation
    def valid_pass(password):
        if len(password) < 8:
          return False

        cek_kapital = any(char.isupper() for char in password)
        cek_kecil = any(char.islower() for char in password)
        cek_angka = any(char.isdigit() for char in password)
        unique_char = '/.,@#$%'
        cek_char = any(char in password for char in unique_char)

        return cek_kapital and cek_kecil and cek_angka and cek_char

    def valid_userid(user_id, database):
        if len(user_id) < 6 or len(user_id) > 20:
          print('UserID harus terdiri dari 6 hingga 20 karakter.')
          return False

        if not user_id.isalnum():
          print('UserID harus terdiri dari kombinasi huruf dan angka.')
          return False

        if user_id in database:
          print('UserID sudah digunakan. Silakan gunakan UserID yang lain.')
          return False

        return True

    def valid_email(email):

        parts = email.split('@')

        if len(parts) != 2:
          print('Email Tidak Valid, Alasan: Format Email Salah')
          return False

        username, domain = parts

        if username == '':
          print('Email Tidak Valid, Alasan: Format Username yang anda masukkan salah')
          return False

        # Username Validation
        if not (username[0].isalnum()):
          print('Email Tidak Valid, Alasan: Format Username yang anda masukkan salah')
          return False

        elif not all(c.isalnum() or c in ['_', '.'] for c in username):
          print('Email Tidak Valid, Alasan: Format Username yang anda masukkan salah')
          return False

        # Domain Validation
        domain_parts = domain.split('.')

        if len(domain_parts) not in [2, 3]:
          print('Email Tidak Valid, Alasan: Format Domain yang anda masukkan salah')
          return False

        # Hosting Name Validation
        if domain_parts[0] == '':
            print('Email Tidak Valid, Alasan: Nama Hosting yang anda masukkan salah')
            return False
        elif not all(c.isalnum() or c in ['_', '.'] for c in domain_parts[0]):
            print('Email Tidak Valid, Alasan: Nama Hosting yang anda masukkan salah')
            return False

        # Extention Validation
        for part in domain_parts[1:]:
            if not part or not part.isalpha() or not (2 <= len(part) <= 5):
                print('Email Tidak Valid, Alasan: Format Ekstensi yang anda masukkan Salah')
                return False

        print('Alamat Email yang anda Masukkan Valid')
        return True

    def valid_nama(nama):
        return nama.isalpha()

    def valid_gender(gender):
        return gender.lower() in ['male', 'female']

    def valid_usia(usia):
        return 17 <= int(usia) <= 80

    def valid_pekerjaan(pekerjaan):
        return pekerjaan.isalpha()

    def valid_hobi(hobi):
        return hobi.isalpha() and len(hobi.split()) > 0

    def valid_nama_kota(nama_kota):
        return nama_kota.isalpha()

    def valid_rt_rw(rt_rw):
        return rt_rw.isdigit()

    def valid_zip_code(zip_code):
        return zip_code.isdigit() and len(zip_code) == 5

    def valid_no_hp(no_hp):
        return no_hp.isdigit() and 11 <= len(no_hp) <= 13

    # User Input
    print('Masukkan Data :')
    personal_data = {
        'UserId': get_userid_input('Masukkan UserId Anda: ', valid_userid, db),
        'Password': get_input('Masukkan Password Anda: ', valid_pass),
        'Email': get_input('Masukkan Email Anda: ', valid_email),
        'Nama': get_input('Masukkan Nama Anda: ', valid_nama),
        'Gender': get_input('Masukkan Gender Anda (Male/Female): ', valid_gender),
        'Usia': get_input('Masukkan Usia Anda: ', valid_usia, int),
        'Pekerjaan': get_input('Masukkan Pekerjaan Anda: ', valid_pekerjaan),
        'Hobi': get_multiple_input('Masukkan Hobi Anda (pisahkan dengan spasi untuk lebih dari satu hobi): ', valid_hobi),
        'Alamat': {
            'Nama Kota': get_input('Masukkan Nama Kota Anda: ', valid_nama_kota),
            'RT': get_input('Masukkan Nomor RT: ', valid_rt_rw),
            'RW': get_input('Masukkan Nomor RW: ', valid_rt_rw),
            'Zip Code': get_input('Masukkan Zip Code: ', valid_zip_code),
            'Geo': get_geo_input('Masukkan Koordinat Geo (Latitude Longitude dipisahkan dengan spasi): ')
        },
        'No. Hp': get_input('Masukkan Nomor HP Anda: ', valid_no_hp)
    }

    return personal_data

def user_login(database = db):
    print('------ Login ------')
    percobaan_max = 5
    percobaan = 0
    sukses_login = False

    while percobaan < percobaan_max and not sukses_login:
        print(f'Percobaan ke-{percobaan + 1}')
        userid = input('Masukkan ID : ')
        password = input('Masukkan Password : ')

        for data in db:
          if data['UserId'] == userid:
            if data['Password'] == password:
              print('Anda Berhasil Login')
              print_personal_data(data)
              sukses_login = True
              break

            elif data['Password'] != password:
              print('Password Salah')
          else:
            print('ID Tidak Terdaftar')

        if percobaan == percobaan_max:
          print('Kesempatan login habis, kembali ke main menu\n')
          main_menu()

        percobaan += 1